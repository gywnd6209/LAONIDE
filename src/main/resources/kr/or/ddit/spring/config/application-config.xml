<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">

	<!-- 
		설정파일에 bean으로 클래스를 등록하지 않고, @Controller/ @Service/ @Repository/ @Component가 클래스 상단에 선언되면 해당 클래스를 빈으로 자동 등록.
		@Controller : 클라이언트의 요청을 처리하는 Controller 클래스 상단에 설정
		@Service 	: Model layer의 Service단 클래스 상단에 설정
		@Repository : Model layer의 Dao단 클래스 상단에 설정
		@Component  : @Controller, @Service, @Repository 외 기타 클래스 상단에 설정
					  
		base-package: 선언된 패키지 하위 전체의 패키지 내 존재하는 클래스 중에서 @Controller, @Service, @Repository, @Component가 선언된
					   클래스를 자동으로 빈등록 			  
	 	
	 	component-scan 선언시 어노테이션 확장 활용 : @Required, @Resource, @Value, @PreDestory, @PostConstruct, @Autowired
	 -->
	 
	 <!-- 웹에서는 @Service, @Repository, @Component이 rootContext만들어질 떄 인스턴스화 되고, @Controller는 시기가 완전히 다르다. 
	 그래서 선언시 exclude나 include를 같이해준다고 의미가 잇는것이아니다.-->
	 <context:component-scan base-package="kr.or.ddit">
	 	<context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
	 	<context:include-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
	 	<context:include-filter type="annotation" expression="org.springframework.stereotype.Component"/>
	 </context:component-scan>
</beans>
